{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "InstantiateMsg",
  "type": "object",
  "required": [
    "proposal_cost",
    "quorum",
    "token_info"
  ],
  "properties": {
    "proposal_cost": {
      "description": "The number of webdao tokens that must be locked in order to create a new proposal.",
      "allOf": [
        {
          "$ref": "#/definitions/Uint128"
        }
      ]
    },
    "quorum": {
      "description": "The number of webdao tokens that must participate in a vote in order for it to complete.",
      "allOf": [
        {
          "$ref": "#/definitions/Uint128"
        }
      ]
    },
    "token_info": {
      "description": "Information about the voting tokens that the DAO will use.",
      "allOf": [
        {
          "$ref": "#/definitions/TokenInstantiateInfo"
        }
      ]
    }
  },
  "definitions": {
    "Cw20Coin": {
      "type": "object",
      "required": [
        "address",
        "amount"
      ],
      "properties": {
        "address": {
          "type": "string"
        },
        "amount": {
          "$ref": "#/definitions/Uint128"
        }
      }
    },
    "TokenInstantiateInfo": {
      "type": "object",
      "required": [
        "decimals",
        "initial_balances",
        "name",
        "symbol"
      ],
      "properties": {
        "decimals": {
          "description": "The number of decimals that frontends should display when showing token balances. For example, if an address has 100,000 tokens and the decimal number is 3 then the displayed balance will be 100.000.",
          "type": "integer",
          "format": "uint8",
          "minimum": 0.0
        },
        "initial_balances": {
          "description": "The initial token balances. This determins the number of tokens that will initially be in circulation.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Cw20Coin"
          }
        },
        "name": {
          "description": "The name of the token.",
          "type": "string"
        },
        "symbol": {
          "description": "The symbol for the token.",
          "type": "string"
        }
      }
    },
    "Uint128": {
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    }
  }
}
